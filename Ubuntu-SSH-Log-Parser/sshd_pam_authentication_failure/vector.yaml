data_dir: "/var/lib/vector"

sources:
  auth_logs:
    type: file
    include:
      - "auth.log"
    ignore_checkpoints: true
    read_from: beginning

transforms:
  parse_auth_failure:
    type: remap
    inputs:
      - auth_logs
    source: |
      parsed = parse_regex!(.message, r'^(?P<timestamp>\w+\s+\d{1,2}\s+\d+:\d+:\d+)\s+(?P<hostname>\S+)\s+(?P<program>\S+)\[(?P<pid>\d+)\]:\s+(?P<event>PAM\s+\d+\s+more\s+authentication\s+failures?);\s+logname=(?P<logname>\S*)\s+uid=(?P<uid>\d+)\s+euid=(?P<euid>\d+)\s+tty=(?P<tty>\S+)\s+ruser=(?P<ruser>\S*)\s+rhost=(?P<rhost>[\d\.]+)(?:\s+user=(?P<user>\S+))?$')
      if parsed != null {
        .timestamp = parsed.timestamp
        .hostname = parsed.hostname
        .program = parsed.program
        .appname = parsed.program
        .pid = to_int!(parsed.pid)
        .logname = parsed.logname
        .uid = to_int!(parsed.uid)
        .euid = to_int!(parsed.euid)
        .tty = parsed.tty
        .ruser = parsed.ruser
        .rhost = parsed.rhost
        if parsed.user != null && parsed.user != "" {
          .user = parsed.user
        }
        .event_type = "pam unix authentication failure"
        . = compact(.)
      } else {
        log("Failed to parse authentication failure log", level: "error")
      }
      del(.file)

sinks:
  output:
    type: file
    inputs:
      - parse_auth_failure
    path: "vector_parsed_auth_failure.json"
    encoding:
      codec: json
